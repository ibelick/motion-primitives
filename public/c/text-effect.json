{
  "name": "text-effect",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "text-effect.tsx",
      "content": "'use client';\nimport { cn } from '@/lib/utils';\nimport {\n  AnimatePresence,\n  motion,\n  TargetAndTransition,\n  Variants,\n} from 'motion/react';\nimport React from 'react';\n\ntype PresetType = 'blur' | 'shake' | 'scale' | 'fade' | 'slide';\n\ntype TextEffectProps = {\n  children: string;\n  per?: 'word' | 'char' | 'line';\n  as?: keyof React.JSX.IntrinsicElements;\n  variants?: {\n    container?: Variants;\n    item?: Variants;\n  };\n  className?: string;\n  preset?: PresetType;\n  delay?: number;\n  trigger?: boolean;\n  onAnimationComplete?: () => void;\n  segmentWrapperClassName?: string;\n};\n\nconst defaultStaggerTimes: Record<'char' | 'word' | 'line', number> = {\n  char: 0.03,\n  word: 0.05,\n  line: 0.1,\n};\n\nconst defaultContainerVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.05,\n    },\n  },\n  exit: {\n    transition: { staggerChildren: 0.05, staggerDirection: -1 },\n  },\n};\n\nconst defaultItemVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n  },\n  exit: { opacity: 0 },\n};\n\nconst presetVariants: Record<\n  PresetType,\n  { container: Variants; item: Variants }\n> = {\n  blur: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, filter: 'blur(12px)' },\n      visible: { opacity: 1, filter: 'blur(0px)' },\n      exit: { opacity: 0, filter: 'blur(12px)' },\n    },\n  },\n  shake: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { x: 0 },\n      visible: { x: [-5, 5, -5, 5, 0], transition: { duration: 0.5 } },\n      exit: { x: 0 },\n    },\n  },\n  scale: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, scale: 0 },\n      visible: { opacity: 1, scale: 1 },\n      exit: { opacity: 0, scale: 0 },\n    },\n  },\n  fade: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0 },\n      visible: { opacity: 1 },\n      exit: { opacity: 0 },\n    },\n  },\n  slide: {\n    container: defaultContainerVariants,\n    item: {\n      hidden: { opacity: 0, y: 20 },\n      visible: { opacity: 1, y: 0 },\n      exit: { opacity: 0, y: 20 },\n    },\n  },\n};\n\nconst AnimationComponent: React.FC<{\n  segment: string;\n  variants: Variants;\n  per: 'line' | 'word' | 'char';\n  segmentWrapperClassName?: string;\n}> = React.memo(({ segment, variants, per, segmentWrapperClassName }) => {\n  const content =\n    per === 'line' ? (\n      <motion.span variants={variants} className='block'>\n        {segment}\n      </motion.span>\n    ) : per === 'word' ? (\n      <motion.span\n        aria-hidden='true'\n        variants={variants}\n        className='inline-block whitespace-pre'\n      >\n        {segment}\n      </motion.span>\n    ) : (\n      <motion.span className='inline-block whitespace-pre'>\n        {segment.split('').map((char, charIndex) => (\n          <motion.span\n            key={`char-${charIndex}`}\n            aria-hidden='true'\n            variants={variants}\n            className='inline-block whitespace-pre'\n          >\n            {char}\n          </motion.span>\n        ))}\n      </motion.span>\n    );\n\n  if (!segmentWrapperClassName) {\n    return content;\n  }\n\n  const defaultWrapperClassName = per === 'line' ? 'block' : 'inline-block';\n\n  return (\n    <span className={cn(defaultWrapperClassName, segmentWrapperClassName)}>\n      {content}\n    </span>\n  );\n});\n\nAnimationComponent.displayName = 'AnimationComponent';\n\nexport function TextEffect({\n  children,\n  per = 'word',\n  as = 'p',\n  variants,\n  className,\n  preset,\n  delay = 0,\n  trigger = true,\n  onAnimationComplete,\n  segmentWrapperClassName,\n}: TextEffectProps) {\n  let segments: string[];\n\n  if (per === 'line') {\n    segments = children.split('\\n');\n  } else if (per === 'word') {\n    segments = children.split(/(\\s+)/);\n  } else {\n    segments = children.split('');\n  }\n\n  const MotionTag = motion[as as keyof typeof motion] as typeof motion.div;\n  const selectedVariants = preset\n    ? presetVariants[preset]\n    : { container: defaultContainerVariants, item: defaultItemVariants };\n  const containerVariants = variants?.container || selectedVariants.container;\n  const itemVariants = variants?.item || selectedVariants.item;\n  const ariaLabel = per === 'line' ? undefined : children;\n\n  const stagger = defaultStaggerTimes[per];\n\n  const delayedContainerVariants: Variants = {\n    hidden: containerVariants.hidden,\n    visible: {\n      ...containerVariants.visible,\n      transition: {\n        ...(containerVariants.visible as TargetAndTransition)?.transition,\n        staggerChildren:\n          (containerVariants.visible as TargetAndTransition)?.transition\n            ?.staggerChildren || stagger,\n        delayChildren: delay,\n      },\n    },\n    exit: containerVariants.exit,\n  };\n\n  return (\n    <AnimatePresence mode='popLayout'>\n      {trigger && (\n        <MotionTag\n          initial='hidden'\n          animate='visible'\n          exit='exit'\n          aria-label={ariaLabel}\n          variants={delayedContainerVariants}\n          className={cn('whitespace-pre-wrap', className)}\n          onAnimationComplete={onAnimationComplete}\n        >\n          {segments.map((segment, index) => (\n            <AnimationComponent\n              key={`${per}-${index}-${segment}`}\n              segment={segment}\n              variants={itemVariants}\n              per={per}\n              segmentWrapperClassName={segmentWrapperClassName}\n            />\n          ))}\n        </MotionTag>\n      )}\n    </AnimatePresence>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}