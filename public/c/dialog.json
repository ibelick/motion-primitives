{
  "name": "dialog",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "dialog.tsx",
      "content": "'use client';\nimport { AnimatePresence, motion, Transition, Variants } from 'motion/react';\nimport React, { createContext, useContext, useEffect, useRef } from 'react';\nimport { cn } from '@/lib/utils';\nimport { useId } from 'react';\nimport { createPortal } from 'react-dom';\nimport { X } from 'lucide-react';\nimport { usePreventScroll } from '@/hooks/usePreventScroll';\n\nconst DialogContext = createContext<{\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  dialogRef: React.RefObject<HTMLDialogElement | null>;\n  variants: Variants;\n  transition?: Transition;\n  ids: {\n    dialog: string;\n    title: string;\n    description: string;\n  };\n  onAnimationComplete: (definition: string) => void;\n  handleTrigger: () => void;\n} | null>(null);\n\nconst defaultVariants: Variants = {\n  initial: {\n    opacity: 0,\n    scale: 0.9,\n  },\n  animate: {\n    opacity: 1,\n    scale: 1,\n  },\n};\n\nconst defaultTransition: Transition = {\n  ease: 'easeOut',\n  duration: 0.2,\n};\n\ntype DialogProps = {\n  children: React.ReactNode;\n  variants?: Variants;\n  transition?: Transition;\n  className?: string;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  open?: boolean;\n};\n\nfunction Dialog({\n  children,\n  variants = defaultVariants,\n  transition = defaultTransition,\n  defaultOpen,\n  onOpenChange,\n  open,\n}: DialogProps) {\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(\n    defaultOpen || false\n  );\n  const dialogRef = useRef<HTMLDialogElement>(null);\n  const isOpen = open !== undefined ? open : uncontrolledOpen;\n\n  // prevent scroll when dialog is open on iOS\n  usePreventScroll({\n    isDisabled: !isOpen,\n  });\n\n  const setIsOpen = React.useCallback(\n    (value: boolean) => {\n      setUncontrolledOpen(value);\n      onOpenChange?.(value);\n    },\n    [onOpenChange]\n  );\n\n  useEffect(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (isOpen) {\n      document.body.classList.add('overflow-hidden');\n    } else {\n      document.body.classList.remove('overflow-hidden');\n    }\n\n    const handleCancel = (e: Event) => {\n      e.preventDefault();\n      if (isOpen) {\n        setIsOpen(false);\n      }\n    };\n\n    dialog.addEventListener('cancel', handleCancel);\n    return () => {\n      dialog.removeEventListener('cancel', handleCancel);\n      document.body.classList.remove('overflow-hidden');\n    };\n  }, [dialogRef, isOpen, setIsOpen]);\n\n  useEffect(() => {\n    if (isOpen && dialogRef.current) {\n      dialogRef.current.showModal();\n    }\n  }, [isOpen]);\n\n  const handleTrigger = () => {\n    setIsOpen(true);\n  };\n\n  const onAnimationComplete = (definition: string) => {\n    if (definition === 'exit' && !isOpen) {\n      dialogRef.current?.close();\n    }\n  };\n\n  const baseId = useId();\n  const ids = {\n    dialog: `motion-ui-dialog-${baseId}`,\n    title: `motion-ui-dialog-title-${baseId}`,\n    description: `motion-ui-dialog-description-${baseId}`,\n  };\n\n  return (\n    <DialogContext.Provider\n      value={{\n        isOpen,\n        setIsOpen,\n        dialogRef,\n        variants,\n        transition,\n        ids,\n        onAnimationComplete,\n        handleTrigger,\n      }}\n    >\n      {children}\n    </DialogContext.Provider>\n  );\n}\n\ntype DialogTriggerProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n\nfunction DialogTrigger({ children, className }: DialogTriggerProps) {\n  const context = useContext(DialogContext);\n  if (!context) throw new Error('DialogTrigger must be used within Dialog');\n\n  return (\n    <button\n      onClick={context.handleTrigger}\n      className={cn(\n        'inline-flex items-center justify-center rounded-md text-sm font-medium',\n        'transition-colors focus-visible:outline-none focus-visible:ring-2',\n        'focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n        className\n      )}\n    >\n      {children}\n    </button>\n  );\n}\n\ntype DialogPortalProps = {\n  children: React.ReactNode;\n  container?: HTMLElement | null;\n};\n\nfunction DialogPortal({\n  children,\n  container = typeof window !== 'undefined' ? document.body : null,\n}: DialogPortalProps) {\n  const [mounted, setMounted] = React.useState(false);\n  const [portalContainer, setPortalContainer] =\n    React.useState<HTMLElement | null>(null);\n\n  useEffect(() => {\n    setMounted(true);\n    setPortalContainer(container || document.body);\n    return () => setMounted(false);\n  }, [container]);\n\n  if (!mounted || !portalContainer) {\n    return null;\n  }\n\n  return createPortal(children, portalContainer);\n}\ntype DialogContentProps = {\n  children: React.ReactNode;\n  className?: string;\n  container?: HTMLElement;\n};\n\nfunction DialogContent({ children, className, container }: DialogContentProps) {\n  const context = useContext(DialogContext);\n  if (!context) throw new Error('DialogContent must be used within Dialog');\n  const {\n    isOpen,\n    setIsOpen,\n    dialogRef,\n    variants,\n    transition,\n    ids,\n    onAnimationComplete,\n  } = context;\n\n  const content = (\n    <AnimatePresence mode='wait'>\n      {isOpen && (\n        <motion.dialog\n          key={ids.dialog}\n          ref={dialogRef as React.RefObject<HTMLDialogElement>}\n          id={ids.dialog}\n          aria-labelledby={ids.title}\n          aria-describedby={ids.description}\n          aria-modal='true'\n          role='dialog'\n          onClick={(e) => {\n            if (e.target === dialogRef.current) {\n              setIsOpen(false);\n            }\n          }}\n          initial='initial'\n          animate='animate'\n          exit='exit'\n          variants={variants}\n          transition={transition}\n          onAnimationComplete={onAnimationComplete}\n          className={cn(\n            'fixed rounded-lg border border-zinc-200 p-0 shadow-lg dark:border dark:border-zinc-700',\n            'backdrop:bg-black/50 backdrop:backdrop-blur-sm',\n            'open:flex open:flex-col',\n            className\n          )}\n        >\n          <div className='w-full'>{children}</div>\n        </motion.dialog>\n      )}\n    </AnimatePresence>\n  );\n\n  return <DialogPortal container={container}>{content}</DialogPortal>;\n}\n\ntype DialogHeaderProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n\nfunction DialogHeader({ children, className }: DialogHeaderProps) {\n  return (\n    <div className={cn('flex flex-col space-y-1.5', className)}>{children}</div>\n  );\n}\n\ntype DialogTitleProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n\nfunction DialogTitle({ children, className }: DialogTitleProps) {\n  const context = useContext(DialogContext);\n  if (!context) throw new Error('DialogTitle must be used within Dialog');\n\n  return (\n    <h2\n      id={context.ids.title}\n      className={cn('text-base font-medium', className)}\n    >\n      {children}\n    </h2>\n  );\n}\n\ntype DialogDescriptionProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n\nfunction DialogDescription({ children, className }: DialogDescriptionProps) {\n  const context = useContext(DialogContext);\n  if (!context) throw new Error('DialogDescription must be used within Dialog');\n\n  return (\n    <p\n      id={context.ids.description}\n      className={cn('text-base text-zinc-500', className)}\n    >\n      {children}\n    </p>\n  );\n}\n\ntype DialogCloseProps = {\n  className?: string;\n  children?: React.ReactNode;\n  disabled?: boolean;\n};\n\nfunction DialogClose({ className, children, disabled }: DialogCloseProps) {\n  const context = useContext(DialogContext);\n  if (!context) throw new Error('DialogClose must be used within Dialog');\n\n  return (\n    <button\n      onClick={() => context.setIsOpen(false)}\n      type='button'\n      aria-label='Close dialog'\n      className={cn(\n        'absolute right-4 top-4 rounded-sm opacity-70 transition-opacity',\n        'hover:opacity-100 focus:outline-none focus:ring-2',\n        'focus:ring-zinc-500 focus:ring-offset-2 disabled:pointer-events-none',\n        className\n      )}\n      disabled={disabled}\n    >\n      {children || <X className='h-4 w-4' />}\n      <span className='sr-only'>Close</span>\n    </button>\n  );\n}\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n};\n",
      "type": "registry:ui"
    }
  ]
}